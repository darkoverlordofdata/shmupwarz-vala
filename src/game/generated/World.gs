/**
 * Entitas Generated World Extensions for shmupwarz
 *
 * do not edit this file
 */
[indent=4]
uses Bosco
uses Bosco.ECS
namespace Bosco.ECS 
    class World : WorldBase 



        componentsEnum : static array of string
        totalComponents : static int = 0
        instance : static World 

        construct(componentsEnum : array of string, startCreationIndex : int=0)
            super(componentsEnum, startCreationIndex)

        /** @type {entitas.Entity} */
        prop scoreEntity : Entity
            get
                return getGroup(Matching.Score).getSingleEntity()

        /** @type {shmupwarz.ScoreComponent} */
        prop score : ScoreComponent
            get
                return scoreEntity.score

        /** @type {boolean} */
        prop hasScore : bool
            get
                return scoreEntity != null

        /**
         * @param {double} value
         * @returns {entitas.Entity}
         */
        def setScore(value:double) : Entity
            if hasScore
                raise new EcsException.SingleEntity("Matching Score")

            var entity = createEntity("Score")
            entity.addScore(value)
            return entity

        /**
         * @param {double} value
         * @returns {entitas.Entity}
         */
        def replaceScore(value:double) : Entity
            var entity = scoreEntity
            if entity == null
                entity = setScore(value)
            else
                entity.replaceScore(value)
            return entity

        /**
         * @returns {entitas.Entity}
         */
        def removeScore()
            destroyEntity(scoreEntity)

        /** @type {entitas.Entity} */
        prop mouseEntity : Entity
            get
                return getGroup(Matching.Mouse).getSingleEntity()

        /** @type {shmupwarz.MouseComponent} */
        prop mouse : MouseComponent
            get
                return mouseEntity.mouse

        /** @type {boolean} */
        prop hasMouse : bool
            get
                return mouseEntity != null

        /**
         * @param {double} x
         * @param {double} y
         * @returns {entitas.Entity}
         */
        def setMouse(x:double, y:double) : Entity
            if hasMouse
                raise new EcsException.SingleEntity("Matching Mouse")

            var entity = createEntity("Mouse")
            entity.addMouse(x, y)
            return entity

        /**
         * @param {double} x
         * @param {double} y
         * @returns {entitas.Entity}
         */
        def replaceMouse(x:double, y:double) : Entity
            var entity = mouseEntity
            if entity == null
                entity = setMouse(x, y)
            else
                entity.replaceMouse(x, y)
            return entity

        /**
         * @returns {entitas.Entity}
         */
        def removeMouse()
            destroyEntity(mouseEntity)

        /** @type {entitas.Match} */
        prop firingEntity : Entity
            get
                return getGroup(Matching.Firing).getSingleEntity()

        /** @type {boolean} */
        prop isFiring : bool
            get
                return firingEntity != null

            set
                var entity = firingEntity
                if value != (entity != null)
                    if value
                        createEntity("Firing").isFiring = true
                    else
                        destroyEntity(entity)


