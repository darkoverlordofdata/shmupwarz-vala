/**
 * Entitas Generated Entity Extensions for shmupwarz
 *
 * do not edit this file
 */
[indent=4]
uses Bosco
uses Bosco.ECS
namespace Bosco.ECS
    const POOL_SIZE : int = 128

    class Entity : EntityBase

        construct(componentsEnum : array of string, totalComponents : int=32)
            super(componentsEnum, totalComponents)
            /* Preallocate component pools*/

            _boundsComponentPool = new Bag of BoundsComponent
            for var i=1 to POOL_SIZE
                _boundsComponentPool.push_head(new BoundsComponent())
            _bulletComponent = new BulletComponent()
            _colorAnimationComponentPool = new Bag of ColorAnimationComponent
            for var i=1 to POOL_SIZE
                _colorAnimationComponentPool.push_head(new ColorAnimationComponent())
            _destroyComponent = new DestroyComponent()
            _enemyComponent = new EnemyComponent()
            _expiresComponentPool = new Bag of ExpiresComponent
            for var i=1 to POOL_SIZE
                _expiresComponentPool.push_head(new ExpiresComponent())
            _firingComponent = new FiringComponent()
            _healthComponentPool = new Bag of HealthComponent
            for var i=1 to POOL_SIZE
                _healthComponentPool.push_head(new HealthComponent())
            _layerComponentPool = new Bag of LayerComponent
            for var i=1 to POOL_SIZE
                _layerComponentPool.push_head(new LayerComponent())
            _lifeComponentPool = new Bag of LifeComponent
            for var i=1 to POOL_SIZE
                _lifeComponentPool.push_head(new LifeComponent())
            _mineComponent = new MineComponent()
            _mouseComponentPool = new Bag of MouseComponent
            for var i=1 to POOL_SIZE
                _mouseComponentPool.push_head(new MouseComponent())
            _playerComponent = new PlayerComponent()
            _positionComponentPool = new Bag of PositionComponent
            for var i=1 to POOL_SIZE
                _positionComponentPool.push_head(new PositionComponent())
            _resourceComponentPool = new Bag of ResourceComponent
            for var i=1 to POOL_SIZE
                _resourceComponentPool.push_head(new ResourceComponent())
            _scaleAnimationComponentPool = new Bag of ScaleAnimationComponent
            for var i=1 to POOL_SIZE
                _scaleAnimationComponentPool.push_head(new ScaleAnimationComponent())
            _scaleComponentPool = new Bag of ScaleComponent
            for var i=1 to POOL_SIZE
                _scaleComponentPool.push_head(new ScaleComponent())
            _scoreComponentPool = new Bag of ScoreComponent
            for var i=1 to POOL_SIZE
                _scoreComponentPool.push_head(new ScoreComponent())
            _soundEffectComponentPool = new Bag of SoundEffectComponent
            for var i=1 to POOL_SIZE
                _soundEffectComponentPool.push_head(new SoundEffectComponent())
            _velocityComponentPool = new Bag of VelocityComponent
            for var i=1 to POOL_SIZE
                _velocityComponentPool.push_head(new VelocityComponent())


        def clearBoundsComponentPool()
            _boundsComponentPool.clear()

        /** @type {shmupwarz.BoundsComponent} */
        prop bounds : BoundsComponent
            get
                return (BoundsComponent)getComponent(Component.Bounds)

        /** @type {boolean} */
        prop hasBounds : bool
            get
                return hasComponent(Component.Bounds)

        /**
         * @param {double} radius
         * @returns {entitas.Entity}
         */
        def addBounds(radius:double) : Entity
            var component = _boundsComponentPool.length > 0 ? _boundsComponentPool.pop_head() : new BoundsComponent()
            component.radius = radius
            addComponent(Component.Bounds, component)
            return this

        /**
         * @param {double} radius
         * @returns {entitas.Entity}
         */
        def replaceBounds(radius:double) : Entity
            var previousComponent = hasBounds ? this.bounds : null
            var component = _boundsComponentPool.length > 0 ? _boundsComponentPool.pop_head() : new BoundsComponent()
            component.radius = radius
            replaceComponent(Component.Bounds, component)
            if previousComponent != null
                _boundsComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeBounds() : Entity
            var component = bounds
            removeComponent(Component.Bounds)
            _boundsComponentPool.push_head(component)
            return this

        /** @type {boolean} */
        prop isBullet : bool
            get
                return hasComponent(Component.Bullet)
            set
                if value != isBullet
                    if value
                        addComponent(Component.Bullet, _bulletComponent)
                    else
                        removeComponent(Component.Bullet)

        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setBullet(value : bool) : Entity
            isBullet = value
            return this


        def clearColorAnimationComponentPool()
            _colorAnimationComponentPool.clear()

        /** @type {shmupwarz.ColorAnimationComponent} */
        prop colorAnimation : ColorAnimationComponent
            get
                return (ColorAnimationComponent)getComponent(Component.ColorAnimation)

        /** @type {boolean} */
        prop hasColorAnimation : bool
            get
                return hasComponent(Component.ColorAnimation)

        /**
         * @param {double} redMin
         * @param {double} redMax
         * @param {double} redSpeed
         * @param {double} greenMin
         * @param {double} greenMax
         * @param {double} greenSpeed
         * @param {double} blueMin
         * @param {double} blueMax
         * @param {double} blueSpeed
         * @param {double} alphaMin
         * @param {double} alphaMax
         * @param {double} alphaSpeed
         * @param {bool} redAnimate
         * @param {bool} greenAnimate
         * @param {bool} blueAnimate
         * @param {bool} alphaAnimate
         * @param {bool} repeat
         * @returns {entitas.Entity}
         */
        def addColorAnimation(redMin:double, redMax:double, redSpeed:double, greenMin:double, greenMax:double, greenSpeed:double, blueMin:double, blueMax:double, blueSpeed:double, alphaMin:double, alphaMax:double, alphaSpeed:double, redAnimate:bool, greenAnimate:bool, blueAnimate:bool, alphaAnimate:bool, repeat:bool) : Entity
            var component = _colorAnimationComponentPool.length > 0 ? _colorAnimationComponentPool.pop_head() : new ColorAnimationComponent()
            component.redMin = redMin
            component.redMax = redMax
            component.redSpeed = redSpeed
            component.greenMin = greenMin
            component.greenMax = greenMax
            component.greenSpeed = greenSpeed
            component.blueMin = blueMin
            component.blueMax = blueMax
            component.blueSpeed = blueSpeed
            component.alphaMin = alphaMin
            component.alphaMax = alphaMax
            component.alphaSpeed = alphaSpeed
            component.redAnimate = redAnimate
            component.greenAnimate = greenAnimate
            component.blueAnimate = blueAnimate
            component.alphaAnimate = alphaAnimate
            component.repeat = repeat
            addComponent(Component.ColorAnimation, component)
            return this

        /**
         * @param {double} redMin
         * @param {double} redMax
         * @param {double} redSpeed
         * @param {double} greenMin
         * @param {double} greenMax
         * @param {double} greenSpeed
         * @param {double} blueMin
         * @param {double} blueMax
         * @param {double} blueSpeed
         * @param {double} alphaMin
         * @param {double} alphaMax
         * @param {double} alphaSpeed
         * @param {bool} redAnimate
         * @param {bool} greenAnimate
         * @param {bool} blueAnimate
         * @param {bool} alphaAnimate
         * @param {bool} repeat
         * @returns {entitas.Entity}
         */
        def replaceColorAnimation(redMin:double, redMax:double, redSpeed:double, greenMin:double, greenMax:double, greenSpeed:double, blueMin:double, blueMax:double, blueSpeed:double, alphaMin:double, alphaMax:double, alphaSpeed:double, redAnimate:bool, greenAnimate:bool, blueAnimate:bool, alphaAnimate:bool, repeat:bool) : Entity
            var previousComponent = hasColorAnimation ? this.colorAnimation : null
            var component = _colorAnimationComponentPool.length > 0 ? _colorAnimationComponentPool.pop_head() : new ColorAnimationComponent()
            component.redMin = redMin
            component.redMax = redMax
            component.redSpeed = redSpeed
            component.greenMin = greenMin
            component.greenMax = greenMax
            component.greenSpeed = greenSpeed
            component.blueMin = blueMin
            component.blueMax = blueMax
            component.blueSpeed = blueSpeed
            component.alphaMin = alphaMin
            component.alphaMax = alphaMax
            component.alphaSpeed = alphaSpeed
            component.redAnimate = redAnimate
            component.greenAnimate = greenAnimate
            component.blueAnimate = blueAnimate
            component.alphaAnimate = alphaAnimate
            component.repeat = repeat
            replaceComponent(Component.ColorAnimation, component)
            if previousComponent != null
                _colorAnimationComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeColorAnimation() : Entity
            var component = colorAnimation
            removeComponent(Component.ColorAnimation)
            _colorAnimationComponentPool.push_head(component)
            return this

        /** @type {boolean} */
        prop isDestroy : bool
            get
                return hasComponent(Component.Destroy)
            set
                if value != isDestroy
                    if value
                        addComponent(Component.Destroy, _destroyComponent)
                    else
                        removeComponent(Component.Destroy)

        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setDestroy(value : bool) : Entity
            isDestroy = value
            return this

        /** @type {boolean} */
        prop isEnemy : bool
            get
                return hasComponent(Component.Enemy)
            set
                if value != isEnemy
                    if value
                        addComponent(Component.Enemy, _enemyComponent)
                    else
                        removeComponent(Component.Enemy)

        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setEnemy(value : bool) : Entity
            isEnemy = value
            return this


        def clearExpiresComponentPool()
            _expiresComponentPool.clear()

        /** @type {shmupwarz.ExpiresComponent} */
        prop expires : ExpiresComponent
            get
                return (ExpiresComponent)getComponent(Component.Expires)

        /** @type {boolean} */
        prop hasExpires : bool
            get
                return hasComponent(Component.Expires)

        /**
         * @param {double} delay
         * @returns {entitas.Entity}
         */
        def addExpires(delay:double) : Entity
            var component = _expiresComponentPool.length > 0 ? _expiresComponentPool.pop_head() : new ExpiresComponent()
            component.delay = delay
            addComponent(Component.Expires, component)
            return this

        /**
         * @param {double} delay
         * @returns {entitas.Entity}
         */
        def replaceExpires(delay:double) : Entity
            var previousComponent = hasExpires ? this.expires : null
            var component = _expiresComponentPool.length > 0 ? _expiresComponentPool.pop_head() : new ExpiresComponent()
            component.delay = delay
            replaceComponent(Component.Expires, component)
            if previousComponent != null
                _expiresComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeExpires() : Entity
            var component = expires
            removeComponent(Component.Expires)
            _expiresComponentPool.push_head(component)
            return this

        /** @type {boolean} */
        prop isFiring : bool
            get
                return hasComponent(Component.Firing)
            set
                if value != isFiring
                    if value
                        addComponent(Component.Firing, _firingComponent)
                    else
                        removeComponent(Component.Firing)

        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setFiring(value : bool) : Entity
            isFiring = value
            return this


        def clearHealthComponentPool()
            _healthComponentPool.clear()

        /** @type {shmupwarz.HealthComponent} */
        prop health : HealthComponent
            get
                return (HealthComponent)getComponent(Component.Health)

        /** @type {boolean} */
        prop hasHealth : bool
            get
                return hasComponent(Component.Health)

        /**
         * @param {double} health
         * @param {double} maximumHealth
         * @returns {entitas.Entity}
         */
        def addHealth(health:double, maximumHealth:double) : Entity
            var component = _healthComponentPool.length > 0 ? _healthComponentPool.pop_head() : new HealthComponent()
            component.health = health
            component.maximumHealth = maximumHealth
            addComponent(Component.Health, component)
            return this

        /**
         * @param {double} health
         * @param {double} maximumHealth
         * @returns {entitas.Entity}
         */
        def replaceHealth(health:double, maximumHealth:double) : Entity
            var previousComponent = hasHealth ? this.health : null
            var component = _healthComponentPool.length > 0 ? _healthComponentPool.pop_head() : new HealthComponent()
            component.health = health
            component.maximumHealth = maximumHealth
            replaceComponent(Component.Health, component)
            if previousComponent != null
                _healthComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeHealth() : Entity
            var component = health
            removeComponent(Component.Health)
            _healthComponentPool.push_head(component)
            return this


        def clearLayerComponentPool()
            _layerComponentPool.clear()

        /** @type {shmupwarz.LayerComponent} */
        prop layer : LayerComponent
            get
                return (LayerComponent)getComponent(Component.Layer)

        /** @type {boolean} */
        prop hasLayer : bool
            get
                return hasComponent(Component.Layer)

        /**
         * @param {int} ordinal
         * @returns {entitas.Entity}
         */
        def addLayer(ordinal:int) : Entity
            var component = _layerComponentPool.length > 0 ? _layerComponentPool.pop_head() : new LayerComponent()
            component.ordinal = ordinal
            addComponent(Component.Layer, component)
            return this

        /**
         * @param {int} ordinal
         * @returns {entitas.Entity}
         */
        def replaceLayer(ordinal:int) : Entity
            var previousComponent = hasLayer ? this.layer : null
            var component = _layerComponentPool.length > 0 ? _layerComponentPool.pop_head() : new LayerComponent()
            component.ordinal = ordinal
            replaceComponent(Component.Layer, component)
            if previousComponent != null
                _layerComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeLayer() : Entity
            var component = layer
            removeComponent(Component.Layer)
            _layerComponentPool.push_head(component)
            return this


        def clearLifeComponentPool()
            _lifeComponentPool.clear()

        /** @type {shmupwarz.LifeComponent} */
        prop life : LifeComponent
            get
                return (LifeComponent)getComponent(Component.Life)

        /** @type {boolean} */
        prop hasLife : bool
            get
                return hasComponent(Component.Life)

        /**
         * @param {int} count
         * @returns {entitas.Entity}
         */
        def addLife(count:int) : Entity
            var component = _lifeComponentPool.length > 0 ? _lifeComponentPool.pop_head() : new LifeComponent()
            component.count = count
            addComponent(Component.Life, component)
            return this

        /**
         * @param {int} count
         * @returns {entitas.Entity}
         */
        def replaceLife(count:int) : Entity
            var previousComponent = hasLife ? this.life : null
            var component = _lifeComponentPool.length > 0 ? _lifeComponentPool.pop_head() : new LifeComponent()
            component.count = count
            replaceComponent(Component.Life, component)
            if previousComponent != null
                _lifeComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeLife() : Entity
            var component = life
            removeComponent(Component.Life)
            _lifeComponentPool.push_head(component)
            return this

        /** @type {boolean} */
        prop isMine : bool
            get
                return hasComponent(Component.Mine)
            set
                if value != isMine
                    if value
                        addComponent(Component.Mine, _mineComponent)
                    else
                        removeComponent(Component.Mine)

        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setMine(value : bool) : Entity
            isMine = value
            return this


        def clearMouseComponentPool()
            _mouseComponentPool.clear()

        /** @type {shmupwarz.MouseComponent} */
        prop mouse : MouseComponent
            get
                return (MouseComponent)getComponent(Component.Mouse)

        /** @type {boolean} */
        prop hasMouse : bool
            get
                return hasComponent(Component.Mouse)

        /**
         * @param {double} x
         * @param {double} y
         * @returns {entitas.Entity}
         */
        def addMouse(x:double, y:double) : Entity
            var component = _mouseComponentPool.length > 0 ? _mouseComponentPool.pop_head() : new MouseComponent()
            component.x = x
            component.y = y
            addComponent(Component.Mouse, component)
            return this

        /**
         * @param {double} x
         * @param {double} y
         * @returns {entitas.Entity}
         */
        def replaceMouse(x:double, y:double) : Entity
            var previousComponent = hasMouse ? this.mouse : null
            var component = _mouseComponentPool.length > 0 ? _mouseComponentPool.pop_head() : new MouseComponent()
            component.x = x
            component.y = y
            replaceComponent(Component.Mouse, component)
            if previousComponent != null
                _mouseComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeMouse() : Entity
            var component = mouse
            removeComponent(Component.Mouse)
            _mouseComponentPool.push_head(component)
            return this

        /** @type {boolean} */
        prop isPlayer : bool
            get
                return hasComponent(Component.Player)
            set
                if value != isPlayer
                    if value
                        addComponent(Component.Player, _playerComponent)
                    else
                        removeComponent(Component.Player)

        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setPlayer(value : bool) : Entity
            isPlayer = value
            return this


        def clearPositionComponentPool()
            _positionComponentPool.clear()

        /** @type {shmupwarz.PositionComponent} */
        prop position : PositionComponent
            get
                return (PositionComponent)getComponent(Component.Position)

        /** @type {boolean} */
        prop hasPosition : bool
            get
                return hasComponent(Component.Position)

        /**
         * @param {double} x
         * @param {double} y
         * @returns {entitas.Entity}
         */
        def addPosition(x:double, y:double) : Entity
            var component = _positionComponentPool.length > 0 ? _positionComponentPool.pop_head() : new PositionComponent()
            component.x = x
            component.y = y
            addComponent(Component.Position, component)
            return this

        /**
         * @param {double} x
         * @param {double} y
         * @returns {entitas.Entity}
         */
        def replacePosition(x:double, y:double) : Entity
            var previousComponent = hasPosition ? this.position : null
            var component = _positionComponentPool.length > 0 ? _positionComponentPool.pop_head() : new PositionComponent()
            component.x = x
            component.y = y
            replaceComponent(Component.Position, component)
            if previousComponent != null
                _positionComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removePosition() : Entity
            var component = position
            removeComponent(Component.Position)
            _positionComponentPool.push_head(component)
            return this


        def clearResourceComponentPool()
            _resourceComponentPool.clear()

        /** @type {shmupwarz.ResourceComponent} */
        prop resource : ResourceComponent
            get
                return (ResourceComponent)getComponent(Component.Resource)

        /** @type {boolean} */
        prop hasResource : bool
            get
                return hasComponent(Component.Resource)

        /**
         * @param {string} path
         * @param {Sprite?} sprite
         * @param {bool=false} bgd
         * @returns {entitas.Entity}
         */
        def addResource(path:string, sprite:Sprite?, bgd:bool=false) : Entity
            var component = _resourceComponentPool.length > 0 ? _resourceComponentPool.pop_head() : new ResourceComponent()
            component.path = path
            component.sprite = sprite
            component.bgd = bgd
            addComponent(Component.Resource, component)
            return this

        /**
         * @param {string} path
         * @param {Sprite?} sprite
         * @param {bool=false} bgd
         * @returns {entitas.Entity}
         */
        def replaceResource(path:string, sprite:Sprite?, bgd:bool=false) : Entity
            var previousComponent = hasResource ? this.resource : null
            var component = _resourceComponentPool.length > 0 ? _resourceComponentPool.pop_head() : new ResourceComponent()
            component.path = path
            component.sprite = sprite
            component.bgd = bgd
            replaceComponent(Component.Resource, component)
            if previousComponent != null
                _resourceComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeResource() : Entity
            var component = resource
            removeComponent(Component.Resource)
            _resourceComponentPool.push_head(component)
            return this


        def clearScaleAnimationComponentPool()
            _scaleAnimationComponentPool.clear()

        /** @type {shmupwarz.ScaleAnimationComponent} */
        prop scaleAnimation : ScaleAnimationComponent
            get
                return (ScaleAnimationComponent)getComponent(Component.ScaleAnimation)

        /** @type {boolean} */
        prop hasScaleAnimation : bool
            get
                return hasComponent(Component.ScaleAnimation)

        /**
         * @param {double} min
         * @param {double} max
         * @param {double} speed
         * @param {bool} repeat
         * @param {bool} active
         * @returns {entitas.Entity}
         */
        def addScaleAnimation(min:double, max:double, speed:double, repeat:bool, active:bool) : Entity
            var component = _scaleAnimationComponentPool.length > 0 ? _scaleAnimationComponentPool.pop_head() : new ScaleAnimationComponent()
            component.min = min
            component.max = max
            component.speed = speed
            component.repeat = repeat
            component.active = active
            addComponent(Component.ScaleAnimation, component)
            return this

        /**
         * @param {double} min
         * @param {double} max
         * @param {double} speed
         * @param {bool} repeat
         * @param {bool} active
         * @returns {entitas.Entity}
         */
        def replaceScaleAnimation(min:double, max:double, speed:double, repeat:bool, active:bool) : Entity
            var previousComponent = hasScaleAnimation ? this.scaleAnimation : null
            var component = _scaleAnimationComponentPool.length > 0 ? _scaleAnimationComponentPool.pop_head() : new ScaleAnimationComponent()
            component.min = min
            component.max = max
            component.speed = speed
            component.repeat = repeat
            component.active = active
            replaceComponent(Component.ScaleAnimation, component)
            if previousComponent != null
                _scaleAnimationComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeScaleAnimation() : Entity
            var component = scaleAnimation
            removeComponent(Component.ScaleAnimation)
            _scaleAnimationComponentPool.push_head(component)
            return this


        def clearScaleComponentPool()
            _scaleComponentPool.clear()

        /** @type {shmupwarz.ScaleComponent} */
        prop scale : ScaleComponent
            get
                return (ScaleComponent)getComponent(Component.Scale)

        /** @type {boolean} */
        prop hasScale : bool
            get
                return hasComponent(Component.Scale)

        /**
         * @param {double} x
         * @param {double} y
         * @returns {entitas.Entity}
         */
        def addScale(x:double, y:double) : Entity
            var component = _scaleComponentPool.length > 0 ? _scaleComponentPool.pop_head() : new ScaleComponent()
            component.x = x
            component.y = y
            addComponent(Component.Scale, component)
            return this

        /**
         * @param {double} x
         * @param {double} y
         * @returns {entitas.Entity}
         */
        def replaceScale(x:double, y:double) : Entity
            var previousComponent = hasScale ? this.scale : null
            var component = _scaleComponentPool.length > 0 ? _scaleComponentPool.pop_head() : new ScaleComponent()
            component.x = x
            component.y = y
            replaceComponent(Component.Scale, component)
            if previousComponent != null
                _scaleComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeScale() : Entity
            var component = scale
            removeComponent(Component.Scale)
            _scaleComponentPool.push_head(component)
            return this


        def clearScoreComponentPool()
            _scoreComponentPool.clear()

        /** @type {shmupwarz.ScoreComponent} */
        prop score : ScoreComponent
            get
                return (ScoreComponent)getComponent(Component.Score)

        /** @type {boolean} */
        prop hasScore : bool
            get
                return hasComponent(Component.Score)

        /**
         * @param {double} value
         * @returns {entitas.Entity}
         */
        def addScore(value:double) : Entity
            var component = _scoreComponentPool.length > 0 ? _scoreComponentPool.pop_head() : new ScoreComponent()
            component.value = value
            addComponent(Component.Score, component)
            return this

        /**
         * @param {double} value
         * @returns {entitas.Entity}
         */
        def replaceScore(value:double) : Entity
            var previousComponent = hasScore ? this.score : null
            var component = _scoreComponentPool.length > 0 ? _scoreComponentPool.pop_head() : new ScoreComponent()
            component.value = value
            replaceComponent(Component.Score, component)
            if previousComponent != null
                _scoreComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeScore() : Entity
            var component = score
            removeComponent(Component.Score)
            _scoreComponentPool.push_head(component)
            return this


        def clearSoundEffectComponentPool()
            _soundEffectComponentPool.clear()

        /** @type {shmupwarz.SoundEffectComponent} */
        prop soundEffect : SoundEffectComponent
            get
                return (SoundEffectComponent)getComponent(Component.SoundEffect)

        /** @type {boolean} */
        prop hasSoundEffect : bool
            get
                return hasComponent(Component.SoundEffect)

        /**
         * @param {int} effect
         * @returns {entitas.Entity}
         */
        def addSoundEffect(effect:int) : Entity
            var component = _soundEffectComponentPool.length > 0 ? _soundEffectComponentPool.pop_head() : new SoundEffectComponent()
            component.effect = effect
            addComponent(Component.SoundEffect, component)
            return this

        /**
         * @param {int} effect
         * @returns {entitas.Entity}
         */
        def replaceSoundEffect(effect:int) : Entity
            var previousComponent = hasSoundEffect ? this.soundEffect : null
            var component = _soundEffectComponentPool.length > 0 ? _soundEffectComponentPool.pop_head() : new SoundEffectComponent()
            component.effect = effect
            replaceComponent(Component.SoundEffect, component)
            if previousComponent != null
                _soundEffectComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeSoundEffect() : Entity
            var component = soundEffect
            removeComponent(Component.SoundEffect)
            _soundEffectComponentPool.push_head(component)
            return this


        def clearVelocityComponentPool()
            _velocityComponentPool.clear()

        /** @type {shmupwarz.VelocityComponent} */
        prop velocity : VelocityComponent
            get
                return (VelocityComponent)getComponent(Component.Velocity)

        /** @type {boolean} */
        prop hasVelocity : bool
            get
                return hasComponent(Component.Velocity)

        /**
         * @param {double} x
         * @param {double} y
         * @returns {entitas.Entity}
         */
        def addVelocity(x:double, y:double) : Entity
            var component = _velocityComponentPool.length > 0 ? _velocityComponentPool.pop_head() : new VelocityComponent()
            component.x = x
            component.y = y
            addComponent(Component.Velocity, component)
            return this

        /**
         * @param {double} x
         * @param {double} y
         * @returns {entitas.Entity}
         */
        def replaceVelocity(x:double, y:double) : Entity
            var previousComponent = hasVelocity ? this.velocity : null
            var component = _velocityComponentPool.length > 0 ? _velocityComponentPool.pop_head() : new VelocityComponent()
            component.x = x
            component.y = y
            replaceComponent(Component.Velocity, component)
            if previousComponent != null
                _velocityComponentPool.push_head(previousComponent)

            return this;

        /**
         * @returns {entitas.Entity}
         */
        def removeVelocity() : Entity
            var component = velocity
            removeComponent(Component.Velocity)
            _velocityComponentPool.push_head(component)
            return this

        /** @type {entitas.utils.Bag} */
        _boundsComponentPool : Bag of BoundsComponent
        /** @type {shmupwarz.BulletComponent} */
        _bulletComponent : BulletComponent
        /** @type {entitas.utils.Bag} */
        _colorAnimationComponentPool : Bag of ColorAnimationComponent
        /** @type {shmupwarz.DestroyComponent} */
        _destroyComponent : DestroyComponent
        /** @type {shmupwarz.EnemyComponent} */
        _enemyComponent : EnemyComponent
        /** @type {entitas.utils.Bag} */
        _expiresComponentPool : Bag of ExpiresComponent
        /** @type {shmupwarz.FiringComponent} */
        _firingComponent : FiringComponent
        /** @type {entitas.utils.Bag} */
        _healthComponentPool : Bag of HealthComponent
        /** @type {entitas.utils.Bag} */
        _layerComponentPool : Bag of LayerComponent
        /** @type {entitas.utils.Bag} */
        _lifeComponentPool : Bag of LifeComponent
        /** @type {shmupwarz.MineComponent} */
        _mineComponent : MineComponent
        /** @type {entitas.utils.Bag} */
        _mouseComponentPool : Bag of MouseComponent
        /** @type {shmupwarz.PlayerComponent} */
        _playerComponent : PlayerComponent
        /** @type {entitas.utils.Bag} */
        _positionComponentPool : Bag of PositionComponent
        /** @type {entitas.utils.Bag} */
        _resourceComponentPool : Bag of ResourceComponent
        /** @type {entitas.utils.Bag} */
        _scaleAnimationComponentPool : Bag of ScaleAnimationComponent
        /** @type {entitas.utils.Bag} */
        _scaleComponentPool : Bag of ScaleComponent
        /** @type {entitas.utils.Bag} */
        _scoreComponentPool : Bag of ScoreComponent
        /** @type {entitas.utils.Bag} */
        _soundEffectComponentPool : Bag of SoundEffectComponent
        /** @type {entitas.utils.Bag} */
        _velocityComponentPool : Bag of VelocityComponent
